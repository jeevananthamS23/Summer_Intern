// nextjs-setup-info.js

//--------------npx create-next-app@latest
//------------run---npm run dev
/**
 * ‚úÖ 1. What is your project named?
 * Example Input: "nextproject"
 * 
 * What it does:
 * - Creates a folder named `nextproject` and initializes the Next.js project inside it.
 * 
 * Why it's needed:
 * - Every project needs a unique folder name to avoid file conflicts.
 * 
 * What happens:
 * - A new folder with the project name will be created with all boilerplate files inside it.
 */

/**
 * ‚úÖ 2. Would you like to use TypeScript?
 * Options: Yes / No
 * 
 * What it does:
 * - Enables TypeScript, a typed superset of JavaScript.
 * 
 * Why use TypeScript?
 * - Type safety
 * - Better developer experience (autocomplete, error checking)
 * - Widely used in large codebases
 * 
 * If Yes:
 * - Adds `.ts` and `.tsx` files, and creates `tsconfig.json`
 * 
 * If No:
 * - Uses `.js` and `.jsx` files with standard JavaScript
 * 
 * ‚úÖ Recommended: Yes (for scalability and maintainability)
 */

/**
 * ‚úÖ 3. Would you like to use ESLint?
 * Options: Yes / No
 * 
 * What it does:
 * - Adds ESLint to analyze and fix code issues automatically.
 * 
 * Why use ESLint?
 * - Keeps code clean and consistent
 * - Helps prevent common bugs
 * 
 * If Yes:
 * - Adds `.eslintrc.json`, runs lint checks on save and build
 * 
 * If No:
 * - No linting or formatting support is added by default
 * 
 * ‚úÖ Recommended: Yes (helps maintain clean code)
 */

/**
 * ‚úÖ 4. Would you like to use Tailwind CSS?
 * Options: Yes / No
 * 
 * What it does:
 * - Adds Tailwind CSS, a utility-first CSS framework.
 * 
 * Why use Tailwind?
 * - Build modern, responsive UIs faster
 * - Style using utility classes (e.g., `p-4`, `text-center`)
 * 
 * If Yes:
 * - Installs Tailwind, adds `tailwind.config.js`, and updates styles/globals.css
 * 
 * If No:
 * - You‚Äôll use plain CSS or another framework manually
 * 
 * ‚úÖ Recommended: Yes (efficient and widely adopted for styling)
 */

/**
 * ‚úÖ 5. Would you like your code inside a `src/` directory?
 * Options: Yes / No
 * 
 * What it does:
 * - Places all app logic in a `src/` directory.
 * 
 * Why use `src/`?
 * - Cleaner project structure
 * - Helps separate source files from configs/public assets
 * 
 * If Yes:
 * - All components, pages, and logic go inside `src/`
 * 
 * If No:
 * - Everything remains in the root directory
 * 
 * ‚úÖ Recommended: Yes (for better organization)
 */

/**
 * ‚úÖ 6. Would you like to use App Router? (recommended)
 * Options: Yes / No
 * 
 * What it does:
 * - Enables the new `App Router` introduced in Next.js 13+
 * 
 * Why use App Router?
 * - Better routing features
 * - Support for layouts, templates, loading/error states
 * - Use of Server Components
 * 
 * If Yes:
 * - Creates a new `src/app` directory using file-based routing
 * 
 * If No:
 * - Falls back to old `pages/` directory routing
 * 
 * ‚úÖ Recommended: Yes (more future-proof)
 */

/**
 * ‚úÖ 7. Would you like to use Turbopack for `next dev`?
 * Options: Yes / No
 * 
 * What it does:
 * - Uses Turbopack, a modern bundler, instead of Webpack in development
 * 
 * Why use Turbopack?
 * - Much faster dev server
 * - Better performance in large codebases
 * 
 * If Yes:
 * - `next dev` uses Turbopack for live-reloading and bundling
 * 
 * If No:
 * - Uses Webpack (slower in large apps)
 * 
 * ‚úÖ Recommended: Yes (especially for faster development)
 */

/**
 * ‚úÖ 8. Would you like to customize the import alias (`@/*` by default)?
 * Options: Yes / No
 * 
 * What it does:
 * - Lets you use import aliases like `@/components/Button` instead of long relative paths
 * 
 * Why use an alias?
 * - Easier and cleaner imports
 * - Improves code readability and maintainability
 * 
 * If Yes:
 * - You can set your custom alias (like `~/*`, `$/*`)
 * 
 * If No:
 * - Uses default `@/*` which maps to the `src/` folder
 * 
 * ‚úÖ Recommended: Yes (simplifies path imports)
 */






project-structure.js

// ‚úÖ .next/
// Generated Automatically (build output)
// Purpose:
// - Stores compiled files, static assets, and cached server-rendered pages during development/build.
// - You don‚Äôt edit this folder ‚Äî it's managed by Next.js.

// ‚úÖ node_modules/
// Purpose:
// - Stores all the packages and dependencies installed via npm or yarn.
// - Do not modify manually.
// - Managed automatically when you run: npm install

// ‚úÖ public/
// Purpose:
// - Static file hosting.
// - Files here are served as-is from the root URL (/)
//
// Example Usage:
//   public/vercel.svg ‚ûú Accessible at http://localhost:3000/vercel.svg
//
// Good for:
// - Images, favicons, fonts, robots.txt, etc.
//
// Your Files:
// - file.svg, globe.svg, next.svg, vercel.svg, window.svg ‚Äì likely demo or logo SVGs

// üìÅ src/ (Source Directory)
// This is the main application folder when you select "use src/ directory" during setup.

// üìÅ src/app/
// New routing system in Next.js 13+ ‚Äî the App Router

// ‚úÖ layout.js
// Required in the app/ directory.
// Defines the shared layout structure (e.g., header/footer/sidebar) used across all pages.
//
// Must export:
export default function RootLayout({ children }) {
  return (
    <html>
      <body>{children}</body>
    </html>
  );
}

// Purpose:
// - Wraps all pages and components rendered inside this layout.

// ‚úÖ page.js
// Represents the main route: `/`
// - This is your home page (http://localhost:3000)
// - Every folder in app/ can contain a `page.js` which defines the route for that folder

// ‚úÖ page.module.css
// - A CSS Module file ‚Äî styles scoped only to the component that imports it.
//
// Example usage:
import styles from './page.module.css';
function Example() {
  return <div className={styles.container}>Hello</div>;
}

// ‚úÖ globals.css
// Global CSS file. Used for:
// - CSS resets
// - Font imports
// - Base styles (e.g., body, html)
//
// Imported inside layout.js to apply site-wide styles

// ‚úÖ favicon.ico
// - Icon shown in the browser tab
// - Placed here to be automatically used by Next.js at the root (/favicon.ico)

// üîß Root Configuration Files

// ‚úÖ .gitignore
// - Specifies files/folders Git should ignore
// - Prevents committing unwanted files like .next/, node_modules/, etc.
//
// Example:
const gitignoreExample = `
.next/
node_modules/
.env
`;

// ‚úÖ eslint.config.mjs
// ESLint configuration for code linting and formatting.
// - Ensures code follows best practices and avoids errors

// ‚úÖ jsconfig.json
// Optional, used for JS projects (not TS)
// - Configures path aliases and module resolution
//
// Example alias:
const jsconfig = {
  compilerOptions: {
    baseUrl: ".",
    paths: {
      "@/components/*": ["src/components/*"]
    }
  }
};

// ‚úÖ next.config.mjs
// Core config file for Next.js.
// - Customize behavior like:
//   - Image domains
//   - Environment variables
//   - Rewrites and redirects
//   - Enabling experimental features
//
// Example:
export const config = {
  images: {
    domains: ['example.com']
  }
};

// ‚úÖ package.json
// Project manifest.
// Stores:
// - Project metadata
// - Scripts (next dev, next build, etc.)
// - Dependencies
//
// Example:
const packageScripts = {
  scripts: {
    dev: "next dev",
    build: "next build",
    start: "next start"
  }
};

// ‚úÖ package-lock.json
// - Automatically generated.
// - Locks the exact version of dependencies for consistency across environments.

// ‚úÖ README.md
// - Markdown file describing your project.
// - Good place to write:
//   - Setup instructions
//   - Features
//   - Project goals
