// React + React Router Concepts (Full Theory) as Comments in a JS File

// 1. 🔄 useState Hook
// useState is a React Hook that lets us create and use state variables in functional components.
// Example:
// const [data, setData] = useState(0);
// data is the current value, setData updates it, 0 is the initial value.

// 2. 🔁 useEffect Hook
// useEffect is used to run side effects like fetching data.
// Example:
// useEffect(() => {
//   fetchData();
// }, []);
// Runs fetchData() only once when component loads.

// 3. 🌐 Fetch API
// fetch() is used to get data from a web API.
// Example:
// const response = await fetch("https://jsonplaceholder.typicode.com/posts");
// const dta = await response.json();
// setData(dta);

// 4. ⚛️ createBrowserRouter
// Defines the routes and which components to render.
// Example:
// const allUrls = createBrowserRouter([
//   {
//     path: "/",
//     element: <App />,
//     children: [
//       { path: "/", element: <Home /> },
//       { path: "/user", element: <User /> }
//     ]
//   }
// ]);

// 5. 🛤️ <Outlet> and useOutletContext()
// <Outlet> is a placeholder for child components.
// useOutletContext() allows children to access shared data from parent.
// Example in App.js:
// <Outlet context={{ data, setData }} />
// Example in child:
// let { data, setData } = useOutletContext();

// 6. 🚦 <NavLink>
// Used for navigation links with automatic active class.
// Example:
// <NavLink to="/user">User</NavLink>

// 7. 🧭 useNavigate()
// Used to navigate programmatically.
// Example:
// navigate(`/mobile/${user.title}`);

// 8. 🧾 useParams()
// Used to read dynamic values from the URL.
// Example:
// const { id } = useParams();

// 9. 💤 Lazy Loading with lazy() and Suspense
// Used to load components only when needed.
// Example:
// const Home = lazy(() => import("./Home"));
// <Suspense fallback={<p>page is loading</p>}>
//   <Home />
// </Suspense>

// 10. 🧮 map() for displaying data
// Used to loop through arrays and create UI elements.
// Example:
// {data.map((user) => (
//   <tr key={user.id}>
//     <td>{user.id}</td>
//     <td>{user.title}</td>
//   </tr>
// ))}

// 11. 🧰 Conditional Rendering
// Used to show content only if a condition is true.
// Example:
// {loading ? (
//   <p>Loading...</p>
// ) : (
//   <Table data={data} />
// )}

// 12. 📁 Component Communication
// Parent to Child: send props or context.
// Child to Parent: call setData() or use context.
// Example:
// <button onClick={() => setData(data + 1)}>click me</button>

// 13. 🔄 Dynamic Routing with /mobile/:id
// Allows routes like /mobile/samsung
// Route Setup:
// { path: "/mobile/:id", element: <Mobile /> }
// Inside Mobile.js:
// const { id } = useParams();

// 14. 🔚 Wildcard Route (*)
// Used for unknown paths (404 Page)
// Example:
// {
//   path: "*",
//   element: <h1>hello world</h1>
// }

// End of full theory breakdown for React + React Router v6 concepts.





/*15 paginaion 
/slice() Syntax (for Pagination)
data.slice(startIndex, endIndex);
📌 It returns part of the array from startIndex (inclusive) to endIndex (exclusive).

✅ Math.ceil() Syntax (for Total Pages)

const totalPages = Math.ceil(data.length / rowsPerPage);
📌 It rounds up to the nearest whole number (e.g., 4.2 becomes 5).
*/
